@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@using B03.EE.BlanckeK.Lib.Models
@model Quiz

<script src="~/lib/vuejs/vue.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>


<article id="app" class="card">

    <header class="card-header text-center">{{ message }}{{ currentQuiz.quizName }} </header>
    <br />
    <!-- QuizName-->
    <div class="card-title" style="margin-bottom: 0">
        <div class="form-group card-header" style="background-color: aliceblue">
            <label class="col-md-12 text-center">QuizName</label>
            <input type="text" class="form-control col-md-12" v-model="currentQuiz.quizName">
        </div>
    </div>


    <div class="card-title" style="background-color: aliceblue; padding-top: 2%">
        <div class="text-center col-md-12">
            <p class="text-center col-md-12" style="color: chocolate; font-weight: bold; font-size: large">Questions</p>

            <div class="col-md-12 card-title text-center" v-for="question in currentQuiz.questions" :key="question.id">
                <!-- Question + answer div -->
                <div>

                    <!-- Question div -->
                    <div style="background-color: aliceblue" class="questionDiv form-group">
                        <a v-on:click="RemoveQuestion(question)" style="color: white;" class="badge btn btn-danger float-right">remove question</a>
                        <input type="text" class="form-control" id="question" v-model="question.questionText" />
                        <input name="questionId" type="hidden" class="form-control" id="questionId" v-model="question.id" />
                    </div>
                    <!-- Answer div -->
                    <div style="background-color: lightblue">
                        <label class="col-md-12" style="color: chocolate; font-weight: bold; font-size: large">{{ question.questionText }} </label>
                        <div class="col-md-12" v-for="answer in question.answerList" :key="answer.id">
                            <a v-on:click="RemoveAnswer(question, answer)" style="color: white;" class="badge btn btn-dark float-right">remove answer</a>
                            <input type="text" class="form-control" v-model="answer.answerText">
                            <label>
                                <input type="checkbox" v-model="answer.isCorrectAnswer" />
                                This answer is correct
                            </label>
                        </div>
                    </div>
                    <a v-on:click="AddNewAnswer(question)" style="color: white" class="badge btn btn-secondary col-md-12">Add answer for question: {{ question.questionText }} </a>
                </div>
                <hr style="background-color: chocolate" />
            </div>
            <a v-on:click="AddNewQuestion" style="color: white" class="badge btn btn-primary col-md-12">Add question</a>
        </div>
    </div>

    <div class="card-footer">
        <button v-on:click="SaveCompleteQuiz" class="btn btn-success">Save</button>
        <input type="button" onclick="location.href='../../quiz/index'" id="btnBackToList" class="btn btn-primary" value="Back to list"/>
    </div>
</article>

<script>

    var LoggedInUserid = "@SignInManager.UserManager.GetUserId(User)";

    var app = new Vue({
        el: '#app',
        data: {
            message: null,
            currentQuizId: null,
            currentQuiz: [],
            userid: LoggedInUserid,
            isEdit: false,
            apiUrl: "http://localhost:61716/api"
        },
        created: function() {
            var self = this;
            if ("@Model" === "") {
                self.isEdit = false;
                self.message = 'Creating Quiz: ';
                self.currentQuiz = {
                    "quizName": "",
                    "applicationUserId": self.userid,
                    "questions": [
                        {
                            "questionText": "",
                            "answerList": [
                                {
                                    "answerText": "",
                                    "isCorrectAnswer": false
                                }
                            ]
                        }
                    ]
                }
            } else {
                self.isEdit = true;
                self.message = 'Editing Quiz: ';
                self.currentQuizId = "@Model?.Id";
                self.fetchQuizDetails();
            }
        },
        methods: {
            AddNewQuestion: function () {
                var self = this;
                const newQuestion = {
                    "questionText": "",
                    "answerList":
                    [
                        {
                            "answerText": "",
                            "isCorrectAnswer": false
                        }
                    ]
                };
                self.currentQuiz.questions.push(newQuestion);
            },
            AddNewAnswer: function(question) {
                const newAnswer = {
                    "answerText": "",
                    "isCorrectAnswer": false
                }
                question.answerList.push(newAnswer);
            },
            RemoveQuestion: function (questionToRemove) {
                var self = this;
                self.currentQuiz.questions.splice($.inArray(questionToRemove, self.currentQuiz.questions), 1);
            },
            RemoveAnswer: function (selectedQuestion, answerToRemove) {
                selectedQuestion.answerList.splice($.inArray(answerToRemove, selectedQuestion.answerList), 1);
            },
            SaveCompleteQuiz: function () {
                var self = this;
                var ajaxConfig;
                var ajaxHeaders = new Headers();
                ajaxHeaders.append("Content-Type", "application/json");
                if (self.isEdit === true) {
                    ajaxConfig =
                    {
                        method: 'PUT',
                        body: JSON.stringify(this.currentQuiz),
                        headers: ajaxHeaders
                    };
                    let myRequest = new Request(`${self.apiUrl}/Quiz/${self.currentQuizId}`, ajaxConfig);
                    fetch(myRequest)
                        .then(res => res.json())
                        .then(console.log("geslaagd"));
                } else {
                    ajaxConfig =
                    {
                        method: 'POST',
                        body: JSON.stringify(self.currentQuiz),
                        headers: ajaxHeaders
                    };
                    let myRequest = new Request(`${self.apiUrl}/Quiz`, ajaxConfig);
                    fetch(myRequest)
                        .then(res => res.json());
                }
                redirectToOverView();

            },
            fetchQuizDetails: function() {
                var self = this;
                fetch(`${self.apiUrl}/Quiz/${self.currentQuizId}`)
                    .then(res => res.json())
                    .then(function(res) {
                        self.currentQuiz = res;
                        self.currentQuiz.questions = [];
                    })
                    .catch(err => console.error('Fout: FecthQuizDetails ' + err))
                    .then(function() {
                        self.fetchQuestionsForQuiz(self.currentQuiz);
                    });
            },
            fetchQuestionsForQuiz: function() {
                var self = this;
                fetch(`${self.apiUrl}/questions/quiz/${self.currentQuizId}`)
                    .then(res => res.json())
                    .then(function(res) {
                        self.currentQuiz.questions = res;
                        $.each(res,
                            function(i, currentQuestion) {
                                self.fetchAnswersForQuestion(currentQuestion.id, currentQuestion);
                            }
                        );
                    });

            },
            fetchAnswersForQuestion: function (questionId, currentQuestion) {
                var self = this;
                fetch(`${self.apiUrl}/answers/question/${questionId}`)
                    .then(res => res.json())
                    .then(function(res) {
                        currentQuestion.answerList = res;
                    });
            },
            redirectToOverView: function () {

                document.getElementById("#btnBackToList").click();

            }
        }
    });
</script>
